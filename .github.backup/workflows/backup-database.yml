name: Database Backup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to backup'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  backup:
    name: Backup Database
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Configure AWS credentials
      if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Run backup script
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
      run: |
        ./scripts/backup-database.sh production
    
    - name: Upload backup artifact
      uses: actions/upload-artifact@v4
      with:
        name: database-backup-${{ github.run_id }}
        path: /tmp/db-backups/*.sql.gz
        retention-days: 7
    
    - name: Notify success
      if: success()
      run: |
        echo "✅ Database backup completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "Backup ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify failure
      if: failure()
      run: |
        echo "❌ Database backup failed" >> $GITHUB_STEP_SUMMARY
        echo "Please check the logs for details" >> $GITHUB_STEP_SUMMARY