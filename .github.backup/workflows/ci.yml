name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'

jobs:
  # Check code quality
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install ${{ matrix.service }} dependencies
        run: cd ${{ matrix.service }} && npm ci
      
      - name: Lint ${{ matrix.service }}
        run: npm run lint:${{ matrix.service }}
      
      - name: Type check ${{ matrix.service }}
        run: npm run typecheck:${{ matrix.service }}
      
      - name: Check formatting
        run: npm run format:check

  # Run tests
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install ${{ matrix.service }} dependencies
        run: cd ${{ matrix.service }} && npm ci
      
      - name: Setup test environment
        if: matrix.service == 'backend'
        run: |
          cd backend
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
          npx prisma generate
          npx prisma migrate deploy
      
      - name: Run ${{ matrix.service }} tests
        run: npm run test:${{ matrix.service }} -- --coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./${{ matrix.service }}/coverage
          flags: ${{ matrix.service }}
          fail_ci_if_error: true

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit
        run: |
          npm audit --audit-level=high
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Check for forbidden patterns
  forbidden-patterns:
    name: Forbidden Patterns Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for console.log
        run: |
          if grep -r "console\.log" --include="*.ts" --include="*.tsx" ./backend/src ./frontend/src 2>/dev/null; then
            echo "❌ Error: console.log found in source files"
            exit 1
          fi
      
      - name: Check for any type
        run: |
          if grep -r ": any" --include="*.ts" --include="*.tsx" ./backend/src ./frontend/src ./shared 2>/dev/null; then
            echo "❌ Error: 'any' type found in TypeScript files"
            exit 1
          fi
      
      - name: Check for hardcoded secrets
        run: |
          if grep -rE "(password|secret|api_key|apikey|token)\s*=\s*[\"'][^\"']+[\"']" \
            --include="*.ts" --include="*.tsx" \
            ./backend/src ./frontend/src 2>/dev/null | \
            grep -v ".example" | \
            grep -v "test" | \
            grep -v "spec"; then
            echo "❌ Error: Possible hardcoded secrets found"
            exit 1
          fi

  # Build check
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test, security]
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install ${{ matrix.service }} dependencies
        run: cd ${{ matrix.service }} && npm ci
      
      - name: Generate Prisma client
        if: matrix.service == 'backend'
        run: cd backend && npx prisma generate
      
      - name: Build ${{ matrix.service }}
        run: npm run build:${{ matrix.service }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: ${{ matrix.service }}/dist/
          retention-days: 7

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm run install:all
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # Docker build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images
        run: |
          docker compose build --no-cache
      
      - name: Test Docker compose
        run: |
          docker compose up -d
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:3000 || exit 1
          docker compose down

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging..."
          # Add your deployment commands here
          # Example: 
          # - Build and push Docker images to registry
          # - Deploy to Kubernetes/ECS/etc
          # - Run database migrations
          # - Notify team
      
      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke test commands

# Summary job
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality, test, security, forbidden-patterns, build, integration, docker]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Forbidden Patterns | ${{ needs.forbidden-patterns.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
