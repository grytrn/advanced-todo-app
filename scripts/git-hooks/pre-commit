#!/bin/bash
# Enhanced pre-commit hook with security checks
# Copy this to .git/hooks/pre-commit and make executable

set -e

echo "üîç Running enhanced pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in a feature branch
BRANCH=$(git branch --show-current)
if [[ ! "$BRANCH" =~ ^(feature|fix|chore|experiment)/ ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Not on a feature branch ($BRANCH)${NC}"
fi

# 1. Security Checks
echo "üîê Running security checks..."

# Check for hardcoded passwords
if git diff --cached --name-only | xargs grep -l "password\s*=\s*[\"'][^\"']*[\"']" 2>/dev/null; then
    echo -e "${RED}‚ùå Hardcoded password detected!${NC}"
    echo "Found in files:"
    git diff --cached --name-only | xargs grep -l "password\s*=\s*[\"'][^\"']*[\"']" 2>/dev/null
    exit 1
fi

# Check for exposed API keys
if git diff --cached --name-only | xargs grep -l "api[_-]?key\s*[:=]\s*[\"'][^\"']*[\"']" 2>/dev/null | grep -v ".env.example"; then
    echo -e "${RED}‚ùå API key detected! Use environment variables.${NC}"
    exit 1
fi

# Check for private keys
if git diff --cached --name-only | xargs grep -l "BEGIN RSA PRIVATE KEY\|BEGIN PRIVATE KEY\|BEGIN EC PRIVATE KEY" 2>/dev/null; then
    echo -e "${RED}‚ùå Private key detected! Never commit private keys.${NC}"
    exit 1
fi

# Check for .env files (not .env.example)
if git diff --cached --name-only | grep -E "^\.env$|\.env\." | grep -v ".env.example"; then
    echo -e "${RED}‚ùå Attempting to commit .env file!${NC}"
    exit 1
fi

# 2. Code Quality Checks
echo "üìä Running code quality checks..."

# Check for console.log statements
if git diff --cached --name-only --diff-filter=ACM | grep -E "\.(js|ts|jsx|tsx)$" | xargs grep -l "console\.log" 2>/dev/null; then
    echo -e "${RED}‚ùå console.log statements found!${NC}"
    echo "Files with console.log:"
    git diff --cached --name-only --diff-filter=ACM | grep -E "\.(js|ts|jsx|tsx)$" | xargs grep -l "console\.log" 2>/dev/null
    exit 1
fi

# Check for 'any' type in TypeScript files
if git diff --cached --name-only --diff-filter=ACM | grep -E "\.(ts|tsx)$" | xargs grep -E ":\s*any\b|\<any\>" 2>/dev/null | grep -v "@ts-ignore" | grep -v "eslint-disable"; then
    echo -e "${RED}‚ùå 'any' type detected in TypeScript files!${NC}"
    echo "Occurrences:"
    git diff --cached --name-only --diff-filter=ACM | grep -E "\.(ts|tsx)$" | xargs grep -n -E ":\s*any\b|\<any\>" 2>/dev/null | grep -v "@ts-ignore"
    exit 1
fi

# Check for TODO without assignment
if git diff --cached --name-only --diff-filter=ACM | xargs grep -E "TODO(?!.*@[a-z]+-[0-9]+)" 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  TODO found without agent assignment. Use 'TODO @agent-01: description'${NC}"
fi

# Check for potential SQL injection (basic check)
if git diff --cached --name-only --diff-filter=ACM | grep -E "\.(js|ts)$" | xargs grep -E "query\s*\(.*\+.*\)|query\s*\(\s*\`" 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Potential SQL injection risk. Use parameterized queries!${NC}"
fi

# 3. File Ownership Check
echo "üìÅ Checking file ownership..."

# Check if assignments.lock exists
if [ -f "@assignments.lock" ]; then
    # Get current agent
    AGENT=$(git config user.name)
    if [[ "$AGENT" =~ ^@.*-[0-9]+$ ]]; then
        # Get modified files
        MODIFIED_FILES=$(git diff --cached --name-only)
        
        # Check each file against assignments
        while IFS= read -r file; do
            # Check if file matches any locked pattern
            # This is a simplified check - in reality you'd parse the JSON
            if grep -q "$file" "@assignments.lock" 2>/dev/null; then
                if ! grep -q "\"$file\".*\"agent\":\s*\"$AGENT\"" "@assignments.lock" 2>/dev/null; then
                    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Modifying file that may be assigned to another agent: $file${NC}"
                fi
            fi
        done <<< "$MODIFIED_FILES"
    fi
fi

# 4. Import Files Validation
echo "üìã Validating import files..."

# Check if critical import files were modified
IMPORT_FILES=$(git diff --cached --name-only | grep "^@")
if [ -n "$IMPORT_FILES" ]; then
    echo "Modified import files:"
    echo "$IMPORT_FILES"
    
    # Validate JSON files
    for file in $IMPORT_FILES; do
        if [[ "$file" == *.json ]]; then
            if ! python -m json.tool "$file" > /dev/null 2>&1; then
                echo -e "${RED}‚ùå Invalid JSON in $file${NC}"
                exit 1
            fi
        fi
    done
fi

# 5. Dependency Check
echo "üîó Checking dependencies..."

# Check if package.json was modified
if git diff --cached --name-only | grep -E "package\.json$"; then
    echo -e "${YELLOW}‚ö†Ô∏è  package.json modified. Remember to run npm install${NC}"
    
    # Check for missing lock file
    if git diff --cached --name-only | grep -E "package\.json$" | grep -v "package-lock\.json"; then
        echo -e "${YELLOW}‚ö†Ô∏è  package.json modified but no package-lock.json changes${NC}"
    fi
fi

# 6. Test Coverage Reminder
if git diff --cached --name-only --diff-filter=ACM | grep -E "\.(js|ts|jsx|tsx)$" | grep -v ".test." | grep -v ".spec."; then
    echo -e "${YELLOW}üìù Reminder: Don't forget to write tests for your changes!${NC}"
fi

# 7. Documentation Check
if git diff --cached --name-only --diff-filter=ACM | grep -E "^(backend|frontend)/src/.*(service|api|component)" | head -1 > /dev/null; then
    if ! git diff --cached --name-only | grep -E "\.(md|MD)$|README" > /dev/null; then
        echo -e "${YELLOW}üìö Consider updating documentation for your changes${NC}"
    fi
fi

# If we made it here, all checks passed
echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"

# Run standard pre-commit hooks if they exist
if [ -f .husky/pre-commit ]; then
    .husky/pre-commit
fi

exit 0
