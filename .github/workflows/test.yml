name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todoapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
    
    - name: Setup test environment
      run: |
        cp backend/.env.example backend/.env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/todoapp_test" >> backend/.env.test
        echo "REDIS_URL=redis://localhost:6379" >> backend/.env.test
    
    - name: Run migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todoapp_test
    
    - name: Run backend tests
      run: npm run test:backend -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todoapp_test
    
    - name: Upload backend coverage
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: backend/coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
    
    - name: Run frontend tests
      run: npm run test:frontend -- --coverage
    
    - name: Upload frontend coverage
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: frontend/coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todoapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm run install:all
        cd tests/integration && npm ci
    
    - name: Setup test environment
      run: |
        cp backend/.env.example backend/.env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/todoapp_test" >> backend/.env.test
        echo "REDIS_URL=redis://localhost:6379" >> backend/.env.test
        
        cp tests/integration/.env.example tests/integration/.env.test
        echo "API_URL=http://localhost:8000" >> tests/integration/.env.test
    
    - name: Run migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todoapp_test
    
    - name: Start backend server
      run: |
        cd backend
        npm run build
        npm start &
        sleep 5
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todoapp_test
        PORT: 8000
    
    - name: Run integration tests
      run: cd tests/integration && npm test
      env:
        API_URL: http://localhost:8000

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm run install:all
        cd tests/e2e && npm ci
    
    - name: Install Playwright browsers
      run: cd tests/e2e && npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Setup test environment
      run: |
        cp backend/.env.example backend/.env
        cp frontend/.env.example frontend/.env
        echo "VITE_API_URL=http://localhost:8000" >> frontend/.env
    
    - name: Run E2E tests
      run: cd tests/e2e && npm test -- --project=${{ matrix.browser }}
      env:
        CI: true
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-artifacts-${{ matrix.browser }}
        path: |
          tests/e2e/test-results
          tests/e2e/playwright-report

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Download all coverage reports
      uses: actions/download-artifact@v3
    
    - name: Display test summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "✅ Backend tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
          echo "✅ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ E2E tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E tests failed" >> $GITHUB_STEP_SUMMARY
        fi